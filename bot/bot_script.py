from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


from bot.management.dispatcher import Bot, dp
from main import find_address

class States(StatesGroup):
    input_address = State()
    choose_address = State()

@dp.message_handler(text="/start")
async def start_handler(message: Message):
    msg = "–ü—Ä–∏–≤–µ—Ç!üëã\n\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
    await message.answer(msg)
    await States.input_address.set()

@dp.message_handler(state = States.input_address)
async def input_address(message: Message, state: FSMContext):
    places, coords = find_address(message.text)
    async with state.proxy() as data:
        data["coords"] = coords
    keyboard = InlineKeyboardMarkup()
    msg = "–í–æ—Ç, —á—Ç–æ –º—ã –Ω–∞—à–ª–∏ –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ç–æ—á–∫—É.\n\n"
    for pl in places:
        keyboard.add(InlineKeyboardButton(text=pl, callback_data=str(places.index(pl))))
        msg += pl + "\n"
    await message.answer(text=msg, parse_mode="HTML", reply_markup=keyboard)
    await message.delete()
    await States.next()

@dp.callback_query_handler(state = States.choose_address)
async def choose_address(query: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        coords = data["coords"]
    
    await query.message.delete()
    msg = f"–í–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –í–∞–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\n\n<code>{coords[int(query.data)]}</code>\n\n/start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
    la, lo = map(float, coords[int(query.data)].split(","))
    await Bot.send_message(query.from_user.id, msg, "HTML")
    await Bot.send_location(query.from_user.id, la, lo)
    await States.next()